(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{171:function(_,v,t){"use strict";t.r(v);var i=t(0),p=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"代码管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码管理","aria-hidden":"true"}},[_._v("#")]),_._v(" 代码管理")]),_._v(" "),t("h2",{attrs:{id:"_1-svn与git优缺点比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-svn与git优缺点比较","aria-hidden":"true"}},[_._v("#")]),_._v(" 1.SVN与Git优缺点比较")]),_._v(" "),t("p",[_._v("1．SVN优缺点")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("优点：")]),_._v(" "),t("p",[_._v("1、管理方便，逻辑明确，符合一般人思维习惯。")]),_._v(" "),t("p",[_._v("2、易于管理，集中式服务器更能保证安全性。")]),_._v(" "),t("p",[_._v("3、代码一致性非常高。")]),_._v(" "),t("p",[_._v("4、 适合开发人数不多的项目开发。")])]),_._v(" "),t("li",[t("p",[_._v("缺点：")]),_._v(" "),t("p",[_._v("1、服务器压力太大，数据库容量暴增。")]),_._v(" "),t("p",[_._v("2、如果不能连接到服务器上，基本上不可以工作，看上面第二步，如果服务器不能连接上，就不能提交，还原，对比等等。")]),_._v(" "),t("p",[_._v("3、不适合开源开发（开发人数非常非常多，但是Google app engine就是用svn的）。但是一般集中式管理的有非常明确的权限管理机制（例如分支访问限制），可以实现分层管理，从而很好的解决开发人数众多的问题。")])])]),_._v(" "),t("p",[_._v("2．Git优缺点")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("优点：")]),_._v(" "),t("p",[_._v("1、适合分布式开发，强调个体。")]),_._v(" "),t("p",[_._v("2、公共服务器压力和数据量都不会太大。")]),_._v(" "),t("p",[_._v("3、速度快、灵活。")]),_._v(" "),t("p",[_._v("4、任意两个开发者之间可以很容易的解决冲突。")]),_._v(" "),t("p",[_._v("5、离线工作。")])]),_._v(" "),t("li",[t("p",[_._v("缺点：")]),_._v(" "),t("p",[_._v("1、学习周期相对而言比较长。")]),_._v(" "),t("p",[_._v("2、不符合常规思维。")]),_._v(" "),t("p",[_._v("3、代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。")])])]),_._v(" "),t("h2",{attrs:{id:"_2-git与svn的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-git与svn的区别","aria-hidden":"true"}},[_._v("#")]),_._v(" 2.Git与SVN的区别")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("1、Git是分布式的，而SVN不是分布式的")])]),_._v(" "),t("li",[t("p",[_._v("2、Git把内容按元数据方式存储，而SVN是按文件")])]),_._v(" "),t("li",[t("p",[_._v("3、Git没有一个全局版本号，SVN有，目前为止这是SVN相比Git缺少的最大的一个特征")])]),_._v(" "),t("li",[t("p",[_._v("4、Git的内容的完整性要优于SVN: GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏")])]),_._v(" "),t("li",[t("p",[_._v("5、Git下载下来后，在OffLine状态下可以看到所有的Log,SVN不可以")])]),_._v(" "),t("li",[t("p",[_._v("6、SVN必须先Update才能Commit,忘记了合并时就会出现一些错误，git还是比较少的出现这种情况")])]),_._v(" "),t("li",[t("p",[_._v("7、克隆一份全新的目录以同样拥有五个分支来说，SVN是同时复製5个版本的文件,也就是说重复五次同样的动作。而Git只是获取文件的每个版本的 元素，然后只载入主要的分支(master)在我的经验,克隆一个拥有将近一万个提交(commit),五个分支,每个分支有大约1500个文件的 SVN,耗了将近一个小时！而Git只用了区区的1分钟")])]),_._v(" "),t("li",[t("p",[_._v("8、版本库（repository):SVN只能有一个指定中央版本库。当这个中央版本库有问题时，所有工作成员都一起瘫痪直到版本库维修完毕或者新的版本库设立完成。而 Git可以有无限个版本库。或者，更正确的说法，每一个Git都是一个版本库，区别是它们是否拥有活跃目录（Git Working Tree）。如果主要版本库（例如：置於GitHub的版本库）发生了什麼事，工作成员仍然可以在自己的本地版本库（local repository）提交，等待主要版本库恢复即可。工作成员也可以提交到其他的版本库")])]),_._v(" "),t("li",[t("p",[_._v("9、分支（Branch）在SVN，分支是一个完整的目录。且这个目录拥有完整的实际文件。如果工作成员想要开啟新的分支，那将会影响“全世界”！每个人都会拥有和你一样的分支。如果你的分支是用来进行破坏工作（安检测试），那将会像传染病一样,你改一个分支，还得让其他人重新切分支重新下载，十分狗血。而 Git，每个工作成员可以任意在自己的本地版本库开啟无限个分支。举例：当我想尝试破坏自己的程序（安检测试），并且想保留这些被修改的文件供日后使用， 我可以开一个分支，做我喜欢的事。完全不需担心妨碍其他工作成员。只要我不合并及提交到主要版本库，没有一个工作成员会被影响。等到我不需要这个分支时， 我只要把它从我的本地版本库删除即可。无痛无痒。")]),_._v(" "),t("p",[_._v("Git的分支名是可以使用不同名字的。例如：我的本地分支名为OK，而在主要版本库的名字其实是master。")]),_._v(" "),t("p",[_._v("最值得一提，我可以在Git的任意一个提交点（commit point）开启分支！（其中一个方法是使用gitk –all 可观察整个提交记录，然后在任意点开啟分支。）")])]),_._v(" "),t("li",[t("p",[_._v("10、提交（Commit）在SVN，当你提交你的完成品时，它将直接记录到中央版本库。当你发现你的完成品存在严重问题时，你已经无法阻止事情的发生了。如果网路中断，你根本没办法提交！而Git的提交完全属於本地版本库的活动。而你只需“推”（git push）到主要版本库即可。Git的“推”其实是在执行“同步”（Sync）")])])])])}],!1,null,null,null);v.default=p.exports}}]);